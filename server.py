import socket
from rsa import PrivateKey, PublicKey

import torch
from constants import *
from create_dataset import create_dataset
from cryptography import *
from neural_network import SimpleCNN, split_dataset1, test_cnn, train_cnn
from our_dataset import OurDataset


#get one user to the server
def get_user(server: socket.socket):
    server.bind((SERVER_IP, PORT))
    server.listen(NUMBER_OF_USERS)
    return server.accept()
    
#get an encrypted image and save it as temp.png
def get_file(client: socket.socket,key:PrivateKey):
    file_name = "temp.png"
    #get image length in packets
    bytes_number_of_packets = decrypt(client.recv(2),key)
    number_of_packets = int.from_bytes(bytes_number_of_packets,"big")
    data: bytes = b""
    #get the image
    for packet_index in range(number_of_packets):
        data += decrypt(client.recv(BUFFER_SIZE))
    #save the image
    with open(file_name, "wb") as file:
        file.write(data)
    return file_name

# recieve the publick key of the client
def get_client_public_key(client: socket.socket):
    file_name = "client_publick.pem"
    bytes_number_of_packets = client.recv(2)
    #get key length in packets
    number_of_packets = int.from_bytes(bytes_number_of_packets,"big")
    data: bytes = b""
    #recieve the publick key
    for packet_index in range(number_of_packets):
        data += client.recv(BUFFER_SIZE)
    #write the publick key
    with open(file_name, "wb") as file:
        file.write(data)
    return file_name

    


def main():
    #create a pair of rsa keys
    generateKeys(PUBLICK_SERVER, PRIVATE_SERVER)
    #load them into objects
    public_key, private_key = loadKeys(PUBLICK_SERVER,PRIVATE_SERVER)
    #create a dataset
    dataset = create_dataset()
    #split the dataset into train and test
    train_set, test_set = split_dataset1(dataset)
    #load the dataset with the dataloader
    train_loader = torch.utils.data.DataLoader(train_set, batch_size=1,
                                          shuffle=True, num_workers=2)
    #load the dataset with the dataloader
    test_loader = torch.utils.data.DataLoader(test_set, batch_size=1,
                                          shuffle=False, num_workers=2)
    #create the cnn module
    cnn =  SimpleCNN()
    #train the module
    train_cnn(train_loader, cnn)
    #test the module
    test_cnn(test_loader, cnn)
    #create server
    server = socket.socket()
    while True:
        #get client
        client, client_address = get_user(server)
        #get clients publick key
        get_client_public_key(client)
        # load it
        clients_public_key = loadKey("client_publick.pem", True)
        #send ours publick key
        with open(PUBLICK_SERVER,"rb") as key:
            client.send(encrypt(key.read(),clients_public_key))
        try:
            #get files analyze them and send the results
            while True:
                get_file(client, private_key)
                new_dataset = OurDataset()
                new_dataset.__add__("temp.png")
                test = torch.utils.data.DataLoader(new_dataset, batch_size=1,
                                          shuffle=False, num_workers=2)
                client.send(encrypt(test_cnn(test),clients_public_key))
        except:
            continue

if __name__ == "__main__":
    main()