from torch.utils.data import Dataset
from torchvision import transforms
from PIL import Image, ImageOps
import json
import os

from constants import DIRECTORY_SEPERATOR

class OurDataset(Dataset):
    def __init__(self, json_path = None):
        super().__init__()
        self.data = []
        self.malware_dictionary = {}

    def __getitem__(self, key):
        if len(self.data) > key:
            return self.data[key]
        return "moshe"


    def get_image(self, key):
        if key in self.data.keys() and os.path.isfile(key):
            file = open(key, "rb")
            data = file.read()
            file.close()
            return data
        
    def __add__(self, path: str) -> bool:
        if not os.path.isfile(path):
            return False
        # The path supposed to look like this:
        # malimg_fixed_dataset_imgs\malware_family\image_name
        # or this:
        # malimg_fixed_dataset_imgs/malware_family/image_name
        dictionary = {}
        malware_family = path.split(DIRECTORY_SEPERATOR)[1]
        img = Image.open(path)
        img = ImageOps.grayscale(img)
        convert_tensor = transforms.ToTensor()

        img = convert_tensor(img)
        dictionary["class"] = malware_family
        if malware_family not in self.malware_dictionary.keys():
            self.malware_dictionary[malware_family] = len(self.malware_dictionary)
        dictionary["tensor_class"] = self.malware_dictionary[malware_family]
        dictionary["image"] = img

        self.data.append(dictionary)
        return True

    def create_dataset_from_current_data(self, path: str):
        with open(path, "w") as fp:
            json.dump(self.data, fp)

    def __len__(self,):
        return len(self.data)


if __name__ == "__main__":
    pass