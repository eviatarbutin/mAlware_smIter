from torch.utils.data import Dataset
from torchvision import transforms
from PIL import Image, ImageOps
import json
import os

DIRECTORY_SEPERATOR = "/"

# class OurDataset(Dataset):
#     def __init__(self, json_path = None):
#         super().__init__()
#         self.data = {}
#         if json_path:
#             with open(json_path, "r") as fp:
#                 self.data = json.load(fp)

#     def __getitem__(self, key):
#         if key in self.data.keys:
#             return self.data[key]
#         else:
#             return None

#     def get_image(self, key):
#         if key in self.data.keys and os.path.isfile(key):
#             file = open(key, "rb")
#             data = file.read()
#             file.close()
#             return data
        
#     def __add__(self, path: str) -> bool:
#         if not os.path.isfile(path):
#             return False
#         else:
#             # The path supposed to look like this:
#             # malimg_fixed_dataset_imgs\malware_family\image_name
#             malware_family = path.split("\\")[1]
#             self.data[path] = malware_family
#             return True

#     def create_dataset_from_current_data(self, path: str):
#         with open(path, "w") as fp:
#             json.dump(self.data, fp)
#         print(len(self.data))
#     def __len__(self,):
#         return len(self.data)

class OurDataset(Dataset):
    def __init__(self, json_path = None):
        super().__init__()
        self.data = []

    def __getitem__(self, key):
        if len(self.data) > key:
            return self.data[key]
        return "moshe"


    def get_image(self, key):
        if key in self.data.keys() and os.path.isfile(key):
            file = open(key, "rb")
            data = file.read()
            file.close()
            return data
        
    def __add__(self, path: str) -> bool:
        if not os.path.isfile(path):
            return False
        # The path supposed to look like this:
        # malimg_fixed_dataset_imgs\malware_family\image_name
        # or this:
        # malimg_fixed_dataset_imgs/malware_family/image_name
        dictionary = {}
        malware_family = path.split(DIRECTORY_SEPERATOR)[1]
        img = Image.open(path)
        img = ImageOps.grayscale(img)
        convert_tensor = transforms.ToTensor()

        img = convert_tensor(img)
        
        dictionary["class"] = malware_family
        dictionary["image"] = img

        self.data.append(dictionary)
        return True

    def create_dataset_from_current_data(self, path: str):
        with open(path, "w") as fp:
            json.dump(self.data, fp)
        print(len(self.data))
    def __len__(self,):
        return len(self.data)
if __name__ == "__main__":
    pass