import numpy as np
from math import sqrt, ceil
import cv2
import tkinter as tk
from tkinter import filedialog
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog as fd
from tkinter.messagebox import showinfo
from constants import *
import socket


is_file_selected = False
filename_selected = ""

def convert_file_to_image(input_file_name):
    #Read the whole file to data
    with open(input_file_name, 'rb') as binary_file:        
        data = binary_file.read()

    # Data length in bytes
    data_len = len(data)

    # d is a verctor of data_len bytes
    d = np.frombuffer(data, dtype=np.uint8)

    # Assume image shape should be close to square
    sqrt_len = int(ceil(sqrt(data_len)))  # Compute square toot and round up

    # Requiered length in bytes.
    new_len = sqrt_len*sqrt_len

    # Number of bytes to pad (need to add zeros to the end of d)
    pad_len = new_len - data_len

    # Pad d with zeros at the end.
    # padded_d = np.pad(d, (0, pad_len))
    padded_d = np.hstack((d, np.zeros(pad_len, np.uint8)))

    # Reshape 1D array into 2D array with sqrt_len pad_len x sqrt_len (im is going to be a Grayscale image).
    im = np.reshape(padded_d, (sqrt_len, sqrt_len))
    im = cv2.resize(im, FIXED_SIZE)

    # Save image
    cv2.imwrite('im.png', im)

    # Display image
    cv2.imshow('im' ,im)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def send_file(path:str, socket: socket.socket):
    with open(path, "rb") as file:
        content = file.read()
        number_of_packets = len(content) // BUFFER_SIZE + (1 if len(content) % BUFFER_SIZE != 0 else 0)
        try:
            bytes_number_of_packets = number_of_packets.to_bytes(2, "big")        
        except:
            exit("File to large to be sent")
        socket.send(bytes_number_of_packets)
        for packet_index in range(number_of_packets):
            socket.send(content[packet_index*BUFFER_SIZE: (packet_index+1) * BUFFER_SIZE])



def donothing():
   x = 0


def select_file():
    global filename_selected
    global is_file_selected
    filetypes = (
        ('text files', '*.txt'),
        ('All files', '*.*')
    )

    filename = fd.askopenfilename(
        title='Open a file',
        initialdir='/',
        filetypes=filetypes)

    filename_selected = filename
    is_file_selected = True

def conect_client() -> socket.socket:
    client = socket.socket()
    client.connect((CLIENT_IP,PORT))
    return client

def main():
    client = conect_client()
    send_file("a.pdf",client)
    # window = tk.Tk()
    # greeting = tk.Label(text="Hello tkinter")
    # greeting.pack()
    # # filename = filedialog.askopenfilename()

    # # create the window window
    # window = tk.Tk()
    # window.title('Tkinter Open File Dialog')
    # window.resizable(False, False)
    # window.geometry('300x150')



    # # open button
    # open_button = ttk.Button(
    #     window,
    #     text='Open a File',
    #     command=select_file
    # )
    # open_button.pack(expand=True)

    # # print(select_file())
    # # run the application
    # window.mainloop()
        
    # print(is_file_selected)
    # print(filename_selected)


if __name__ == "__main__":
    main()
    # convert_file_to_image("a.pdf")
