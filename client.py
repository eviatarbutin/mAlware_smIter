import numpy as np
from math import sqrt, ceil
import cv2
import tkinter as tk
from tkinter.filedialog import askopenfilename
from tkinter import filedialog as fd
from tkinter.messagebox import showinfo
import socket
from cryptography import *
import threading
from PIL import ImageTk, Image
from constants import *

is_file_selected = False
filename_selected = "default.png"

got_answer = False
answer = ""

def convert_file_to_image(path:str):
    #Read the whole file to data
    with open(path, 'rb') as binary_file:        
        data = binary_file.read()

    # Data length in bytes
    data_len = len(data)

    # d is a verctor of data_len bytes
    d = np.frombuffer(data, dtype=np.uint8)

    # Assume image shape should be close to square
    sqrt_len = int(ceil(sqrt(data_len)))  # Compute square toot and round up

    # Requiered length in bytes.
    new_len = sqrt_len*sqrt_len

    # Number of bytes to pad (need to add zeros to the end of d)
    pad_len = new_len - data_len

    # Pad d with zeros at the end.
    # padded_d = np.pad(d, (0, pad_len))
    padded_d = np.hstack((d, np.zeros(pad_len, np.uint8)))

    # Reshape 1D array into 2D array with sqrt_len pad_len x sqrt_len (im is going to be a Grayscale image).
    im = np.reshape(padded_d, (sqrt_len, sqrt_len))
    im = cv2.resize(im, FIXED_SIZE)

    # Save image
    cv2.imwrite('temp.png', im)
    return "temp.png"

def send_file(path:str, socket: socket.socket):
    if os.path.isfile(path):
        with open(path, "rb") as file:
            content = file.read()
            number_of_packets = len(content) // BUFFER_SIZE + (1 if len(content) % BUFFER_SIZE != 0 else 0)
            try:
                bytes_number_of_packets = number_of_packets.to_bytes(2, "big")        
            except:
                exit("File to large to be sent")
            socket.send(bytes_number_of_packets)
            for packet_index in range(number_of_packets):
                socket.send(content[packet_index*BUFFER_SIZE: (packet_index+1) * BUFFER_SIZE])
    else:
        print("error not a file")

def GUI():
    global filename_selected
    root = tk.Tk()
    root.title("mAlware smIter")
    root.geometry("300x300")

    # Button : Open
    open = tk.Button(root, text = "Open", command = open_file_chooser)
    open.pack()
    img = ImageTk.PhotoImage(Image.open(filename_selected))
    panel = tk.Label(root, image = img)

    # Starting the Application
    root.mainloop()




    # defining open_file_chooser function
def open_file_chooser():
    global filename_selected
    global is_file_selected
    filename_selected = askopenfilename()
    is_file_selected = True
    print("You have selected : %s" % filename_selected)

def send_chosen_file(socket):
    global filename_selected
    global is_file_selected
    global answer
    global got_answer

    while True:
        if is_file_selected:
            is_file_selected = False
            send_file(convert_file_to_image(filename_selected),socket)


def conect_client() -> socket.socket:
    client = socket.socket()
    client.connect((CLIENT_IP,PORT))
    return client

def main():
    client = conect_client()
    send_file = threading.Thread(target=send_chosen_file,args=(client,))
    send_file.start()
    
    GUI()
    send_file.join()

if __name__ == "__main__":
    main()
