import rsa
from constants import *
import os

# generate a pair of rsa keys
def generateKeys(publick_path, private_path):
    #get the keys
    (publicKey, privateKey) = rsa.newkeys(KEY_SIZE)
    #save the keys
    with open(publick_path, 'wb+') as p:
        p.write(publicKey.save_pkcs1('PEM'))
    with open(private_path, 'wb+') as p:
        p.write(privateKey.save_pkcs1('PEM'))

#load the keys into variables/objects
def loadKeys(publick_path, private_path):
    with open(publick_path, 'rb') as p:
        publicKey = rsa.PublicKey.load_pkcs1(p.read())
    with open(private_path, 'rb') as p:
        privateKey = rsa.PrivateKey.load_pkcs1(p.read())
    #return the keys
    return privateKey, publicKey

#load only one key
#you have a choice which one is it with the publick variable
def loadKey(path:str, publick:bool):
    if publick:
        with open(path, 'rb') as p:
            Key = rsa.PublicKey.load_pkcs1(p.read())
    else:
        with open(path, 'rb') as p:
            Key = rsa.PrivateKey.load_pkcs1(p.read())
    return Key

#encrypts the message with the given key
def encrypt(message, key):
    return rsa.encrypt(message.encode(), key)

#decrypts the ciphertext with the given key
def decrypt(ciphertext, key):
    try:
        return rsa.decrypt(ciphertext, key)
    except:
        return False

